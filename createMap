#!/bin/bash
function timering {
	local last=$(date +%s)
	last=$(($last-$tt))
	echo "Running time is $last seconds."
}
tt=$(date +%s)
trap 'timering' EXIT

style=default
debug=false
nodownload=false
root=$(dirname "${0}")
patharea="${root}/area"
pathcache="${root}/cache"
pathstyle="${root}/style"
pathpolygon="${root}/polygon"
tmpdir=$(dirname $(mktemp -u))
oldtime="-10 month"
verbose=""
while [[ $# -gt 0 ]]; do
	key="$1"
	case $key in
	-a|--area)
		area=${2,,}
		shift # past argument
		shift # past value
		;;
	-s|--style)
		style=${2,,}
		shift # past argument
		shift # past value
		;;
	-d|--debug)
		debug=true
		verbose="--verbose"
		shift # past value
		;;
	-nd|--nodownload)
		nodownload=true
		shift # past argument
		shift # past value
		;;
	--help|*)
		echo -e "Usage: $0 -a name [-l name] [-d] [-nd]" >&2
		echo -e "\t-a,  --area nameofarea\tprocess area to img" >&2
		echo -e "\t-s,  --style\tProcess current style" >&2
		echo -e "\t-d,  --debug\tMore detailed statement" >&2
		echo -e "\t-nd, --nodownload\t\tDisable downloads" >&2
		echo -e "Exit status:" >&2
		echo -e "\t0     - Processed" >&2
		echo -e "\tother - Other error" >&2
		exit 1
		;;
	esac
done

function exitmsg {
	echo -e ${1}" (${2:-0})" >&2 ; exit ${2:-0}
}
function msg {
	${debug} && echo -e ${*}
}

function showFileTime {
	[ ! -e $1 ] && return 1;
	stat -L --format %Y ${1} | { read gmt ; echo `date -d "@$gmt" "+%F %T"`" "`basename ${1}`; }
}

function checkModifFile {
	[[ ! -e ${2} ]] && return 0;
	[[ ${2} -ot ${3} ]] && return 0;
	[[ ${1} -nt ${2} ]] && return 0;
	return 1;
}

function checkPrgsMkgmap {
	local prg=${1,,}
	local file="${pathcache}/${prg}-latest.zip"
	local url="https://www.mkgmap.org.uk/download/${prg}-latest.zip"
	${root}/bin/curletag ${v} --filetime "-1 day" --etagtime "-1 hour" --file ${file} ${url}
	if [ $? -eq 1 ]; then
		unzip -o -q -d "${pathcache}" ${file} || return 1
		# Create symlink
		while read line; do
			unlink "${pathcache}/${prg}" 2>/dev/null
			${debug} && echo "Create symlink ${line} ${prg}"
			ln ${v} -s -r ${line} ${pathcache}/${prg} 2>/dev/null || return 1
			break;
		done < <(ls -td ${pathcache}/${prg}-r*)
	fi;
	if [ -L ${pathcache}/${prg} ]; then
		ls -l ${pathcache}/${prg}
	else
		echo -e "${prg,^^} not found!" >&2
		return 1
	fi;
}



echo -e "\n### "`date '+%F %T'`" START"
echo -e "\n### 0. Check parameters..."

[ -z ${area} ] && errmsg 1 "The parameter area is obligatory. Use $0 --help"

tmpimg="${tmpdir}/${area}"

msg "ROOT: ${root}"
msg "      Area: ${area} "
msg "     Style: ${style}"
msg "     Debug: ${debug}"
msg "NoDownload: ${nodownload}"


[ ! -d ${patharea} ] && mkdir -p ${patharea}
[ ! -d ${pathcache} ] && mkdir -p ${pathcache}
[ ! -d ${pathstyle} ] && mkdir -p ${pathstyle}

echo -e "\n### 0.1 Check ${area}.parameters"
[ ! -e ${patharea}/${area}.parameters ] && exitmsg "Parameters for area '${patharea}/${area}.parameters' not found!" 1;
msg ${patharea}/${area}.parameters
source ${patharea}/${area}.parameters
echo -e "FID: ${img_fid}"
echo -e "url: ${url}"

[ ! -e ${patharea}/${area}.mkgmap ] && exitmsg "Config mkgmap for area '${patharea}/${area}.mkgmap' not found!" 1;


echo -e "\n### 1. Check splitter"
checkPrgsMkgmap splitter || exit 1;

echo -e "\n### 2. Check mkgmap"
checkPrgsMkgmap mkgmap || exit 1;


if [[ ${nodownload}=false && -n "${url}" ]]; then
	msg "\n### 3. Download "`echo ${url} | awk -F[/:] '{print $4}'
`" CREATE ${srcfile}"
	${root}/bin/curletag -ft "-1 day" -f ${srcfile} ${url}
else
	[ -n "${url}" ] && msg "\n### 3. No url."
	[ ! ${nodownload} ] && msg "\n### 3. Disable download by parameter -nd."
fi;

showFileTime ${srcfile} || exitmsg "Source file ${srcfile} not found!" 1

if [[ -n "${polygon}" && -e ${pathpolygon}/${polygon} ]]; then
	polygonname=$(basename ${polygon})
	srctmpfile_plg=$(dirname ${srcfile})"/${polygonname%.*}.${srcfile##*.}"
	if checkModifFile ${srcfile} ${srctmpfile_plg} ${pathpolygon}/${polygon}; then
		echo -e "\n### 4. Create polygon from '${polygon}' to ${srctmpfile_plg}"
		osmconvert ${verbose} ${srcfile} -B=${pathpolygon}/${polygon} -o=${srctmpfile_plg}
	else
		msg "\n### 4. No need to polygoned by ${polygon}"
	fi;
else
	msg "\n### 4. Polygon not exists."
	echo ${pathpolygon}/${polygon}
	srctmpfile_plg=${srcfile}
fi;
exit 0
srctmpfile_flt=cache/${polygonname}".filtered"

if [[ -n "${filter}" && -e ${filter} ]]; then
	if checkModifFile ${srctmpfile_plg} ${srctmpfile_flt} ${filter}; then
		echo -e "\n### 5. Create filter from '${filter}' to ${srctmpfile_plg}"
		echo -n "FILTERED "`date '+%F %T'` > ${srctmpfile_flt}
	else
		msg "\n### 5. No need to filtered by ${polygon}"
	fi;
else
	msg "\n###. 5 Filter not exists."
	srctmpfile_flt=${srctmpfile_plg}
fi;

srcfile=${srctmpfile_flt}
showFileTime ${srcfile} || exitmsg 1 "Source file ${srcfile} not found(2)!"
head -n 1 ${srcfile}

function execjar {
	local prg=$1
	shift;
	[[ ! $prg =~ ^(mkgmap|splitter)$ ]] && exitmsg "Bad program $prg!" 1
	[[ "${debug}" == "true" && -f "${prg}/logger.txt" ]] && local log="-Dlog.config=${tmpimg}/logger.txt"

	#-Xms2048m -Xmx4096m
	local memfree=$(grep MemFree /proc/meminfo | awk '{print $2}')
	msg "\t#############################################"
	msg "\t############### S P L I T E R ###############"
	printf "\t###    MemFree: %20sMB    ###\n" $(($memfree/1024))
	msg "\t#############################################\n"
	memfree=$(($memfree*8/10/1024))
	#[[ $(grep MemFree /proc/meminfo | awk '{print $2}') -gt $((1024*1024*5)) ]] && mem="-Xmx4g"
	local mem="-Xmx${memfree}m"
	msg "execute> java ${mem} ${log} -jar ${pathcache}/${prg}/${prg}.jar $*"
	java ${mem} ${log} -jar ${pathcache}/${prg}/${prg}.jar $*
	return $?
}

yyyymm=$(date +'%Y/%m')

msg "\n### 6. Run splitter"
splitterDir="${tmpdir}/splitter_${area}"

[ ! -d ${splitterDir} ] && mkdir -p ${splitterDir}
${root}/bin/curletag ${v} --filetime "-1 month" --etagtime "-24 hour" --file "${pathcache}/cities500.zip" "http://download.geonames.org/export/dump/cities500.zip"
unzip -l ${pathcache}/cities500.zip &> /dev/null && geonames="--geonames-file=${pathcache}/cities500.zip"
execjar splitter ${geonames} \
		--max-threads=4	\
		--mapid=${img_fid}0001	\
		--status-freq=10	\
		--description=${img_abbr}_${yyyymm}	\
		--output=pbf	\
		--output-dir=${splitterDir}	\
		${srcfile} || exit 1
echo "Directory: ${splitterDir}/"
ls -l ${splitterDir}/
		

#execjar splitter ${geonames} ${argsPolygon}	\
#		--max-threads=2	\
#		--mapid=${imgfid}0001	\
#		--status-freq=10	\
#		--description=${imgname}_${yyyymm}	\
#		--output=pbf	\
#		--output-dir=${splitterDir}	\
#		${srcpbf}
		
msg "\n### 7. Run mkgmap"

msg "\n### 8. Postprocessing"

echo -e "\n### "`date '+%F %T'`" END\n"

exit 0
####################################
filename=$(basename -- "$fullfile")
extension="${filename##*.}"
filename="${filename%.*}"
filename="${fullfile##*/}"

function check {
	local url="a"
	echo "URL '$url'"
	[ -n "${url}" ] && echo "url -n $url "
	[ -z "${url}" ] && echo "url -z $url "
	[ -e "${url}" ] && echo "url -e $url "
	[ ! -e "${url}" ] && echo "url !-e $url "
	#URL ''  url -z   url !-e
	#URL '/' url -n / url -e /
	#URL 'a' url -n a url !-e a
}


